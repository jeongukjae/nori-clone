syntax = "proto3";

package nori.protos;

// #### Data and Enums for the dictionary

// Part of Speech Type
enum POSType {
  // A simple morpheme.
  MORPHEME = 0;
  // Compound noun.
  COMPOUND = 1;
  // Inflected token.
  INFLECT = 2;
  // Pre-analysis token.
  PREANALYSIS = 3;
}

// Part of Speech Tags
enum POSTag {
  option allow_alias = true;

  // Unknown
  UNKNOWN = 0;
  // Unknown
  UNA = 0;
  // Unknown
  NA = 0;
  // Unknown
  VSV = 0;

  // Verbal endings
  E = 1;
  // Interjection
  IC = 2;
  // Ending Particle
  J = 3;
  // General Adverb
  MAG = 4;
  // Conjunctive adverb
  MAJ = 5;
  // Modifier
  MM = 6;
  // General Noun
  NNG = 7;
  // Proper Noun
  NNP = 8;
  // Dependent noun
  NNB = 9;
  // Dependent noun
  NNBC = 10;
  // Pronoun
  NP = 11;
  // Numeral
  NR = 12;
  // Terminal punctuation
  SF = 13;
  // Chinese Characeter
  SH = 14;
  // Foreign language
  SL = 15;
  // Number
  SN = 16;
  // Space
  SP = 17;
  // Closing brackets
  SSC = 18;
  // Opening brackets
  SSO = 19;
  // Separator
  SC = 20;
  // Other symbol
  SY = 21;
  // Ellipsis
  SE = 22;
  // Adjective
  VA = 23;
  // Negative designator
  VCN = 24;
  // Positive designator
  VCP = 25;
  // Verb
  VV = 26;
  // Auxiliary Verb or Adjective
  VX = 27;
  // Prefix
  XPN = 28;
  // Root
  XR = 29;
  // Adjective Suffix
  XSA = 30;
  // Noun Suffix
  XSN = 31;
  // Verb Suffix
  XSV = 32;
}

// Character Classes
// Similar with unicode character groups
enum CharacterClass {
  NGRAM = 0;
  DEFAULT = 1;
  SPACE = 2;
  SYMBOL = 3;
  NUMERIC = 4;
  ALPHA = 5;
  CYRILLIC = 6;
  GREEK = 7;
  HIRAGANA = 8;
  KATAKANA = 9;
  KANJI = 10;
  HANGUL = 11;
  HANJA = 12;
  HANJANUMERIC = 13;
}

message Morpheme {
  message ExprToken {
    POSTag pos_tag = 1;
    string surface = 2;
  }

  // leftId is for calculating connection cost.
  int32 left_id = 1;
  // rightId is for calculating connection cost.
  int32 right_id = 2;
  // wordCost means the cost of morpheme itself
  int32 word_cost = 3;
  POSType pos_type = 4;
  repeated POSTag pos_tags = 5;
  repeated ExprToken expression = 6;
}

message MorphemeList {
  repeated Morpheme morphemes = 1;
}

// #### Dictionary format

// This contains the information of tokens.
// The index of morphemeList means the value of trie dictionary.
message Tokens {
  repeated MorphemeList morphemes_list = 1;
}

// Token informations for unknown tokens.
message UnknownTokens {
  // key is a value of CharacterClass
  map<int32, Morpheme> morpheme_map = 1;

  // character code to character class
  map<int32, CharacterClass> code_to_category_map = 2;

  // character definition infos (char.def)
  // The original description in mecab is as follows.
  //
  // #   - INVOKE: 1/0:   always invoke unknown word processing, evan when the word can be found in the lexicon
  // #   - GROUP:  1/0:   make a new word by grouping the same chracter category
  // #   - LENGTH: n:     1 to n length new words are added
  message CategoryDefinition {
    int32 invoke = 1;
    int32 group = 2;
    int32 length = 3;
  }
  map<int32, CategoryDefinition> invoke_map = 3;
}

message ConnectionCost {
  // index: backwardIndex * forwardIndex + backwardIndex
  repeated int32 cost_lists = 1;
  int32 forward_size = 2;
  int32 backward_size = 3;
}

// Final message to contain all dictionary information
message Dictionary {
  bytes darts_array = 1;
  Tokens tokens = 2;
  UnknownTokens unknown_tokens = 3;
  ConnectionCost connection_cost = 4;

  int32 left_id_nng = 10;
  int32 right_id_nng = 11;
  int32 right_id_nng_t = 12;
  int32 right_id_nng_f = 13;
}
