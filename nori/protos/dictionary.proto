syntax = "proto3";

package nori;

enum POSType {
  // A simple morpheme.
  MORPHEME = 0;
  // Compound noun.
  COMPOUND = 1;
  // Inflected token.
  INFLECT = 2;
  // Pre-analysis token.
  PREANALYSIS = 3;
}

enum POSTag {
  option allow_alias = true;

  // Unknown
  UNKNOWN = 0;
  // Unknown
  UNA = 0;
  // Unknown
  NA = 0;
  // Unknown
  VSV = 0;

  // Verbal endings
  E = 1;
  // Interjection
  IC = 2;
  // Ending Particle
  J = 3;
  // General Adverb
  MAG = 4;
  // Conjunctive adverb
  MAJ = 5;
  // Modifier
  MM = 6;
  // General Noun
  NNG = 7;
  // Proper Noun
  NNP = 8;
  // Dependent noun
  NNB = 9;
  // Dependent noun
  NNBC = 10;
  // Pronoun
  NP = 11;
  // Numeral
  NR = 12;
  // Terminal punctuation
  SF = 13;
  // Chinese Characeter
  SH = 14;
  // Foreign language
  SL = 15;
  // Number
  SN = 16;
  // Space
  SP = 17;
  // Closing brackets
  SSC = 18;
  // Opening brackets
  SSO = 19;
  // Separator
  SC = 20;
  // Other symbol
  SY = 21;
  // Ellipsis
  SE = 22;
  // Adjective
  VA = 23;
  // Negative designator
  VCN = 24;
  // Positive designator
  VCP = 25;
  // Verb
  VV = 26;
  // Auxiliary Verb or Adjective
  VX = 27;
  // Prefix
  XPN = 28;
  // Root
  XR = 29;
  // Adjective Suffix
  XSA = 30;
  // Noun Suffix
  XSN = 31;
  // Verb Suffix
  XSV = 32;
}

enum CharacterClass {
  NGRAM = 0;
  DEFAULT = 1;
  SPACE = 2;
  SYMBOL = 3;
  NUMERIC = 4;
  ALPHA = 5;
  CYRILLIC = 6;
  GREEK = 7;
  HIRAGANA = 8;
  KATAKANA = 9;
  KANJI = 10;
  HANGUL = 11;
  HANJA = 12;
  HANJANUMERIC = 13;
}

message Morpheme {
  message ExprToken {
    POSTag posTag = 1;
    string surface = 2;
  }

  int32 leftId = 1;
  int32 rightId = 2;
  int32 wordCost = 3;
  POSType posType = 4;
  repeated POSTag posTag = 5;
  repeated ExprToken expression = 6;
}

message MorphemeList {
  repeated Morpheme morphemes = 1;
}

message ListDictionary {
  map<int32, MorphemeList> morphemeListMap = 1;
}

message Dictionary {
  map<int32, Morpheme> morphemeMap = 1;
}

message CharacterClassDictionary {
  // character code to character class
  map<int32, int32> codeToCategoryMap = 1;

  message CategoryDefinition {
    int32 invoke = 1;
    int32 group = 2;
    int32 length = 3;
  }
  map<int32, CategoryDefinition> charCategoryDefinitionMap = 2;
}

message ConnectionCost {
  message Costs {
    repeated int32 cost = 1;
  }

  repeated Costs costLists = 1;
}
